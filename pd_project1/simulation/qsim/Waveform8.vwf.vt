// Copyright (C) 2019  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/09/2022 00:42:23"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          cz
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module cz_vlg_vec_tst();
// constants                                           
// general purpose registers
reg c_en;
reg carry;
reg clk;
reg z_en;
reg zero;
// wires                                               
wire c;
wire z;

// assign statements (if any)                          
cz i1 (
// port map - connection between master ports and signals/registers   
	.c(c),
	.c_en(c_en),
	.carry(carry),
	.clk(clk),
	.z(z),
	.z_en(z_en),
	.zero(zero)
);
initial 
begin 
#1000000 $finish;
end 

// clk
initial
begin
	clk = 1'b1;
	# 100000;
	repeat(4)
	begin
		clk = 1'b0;
		clk = #100000 1'b1;
		# 100000;
	end
	clk = 1'b0;
end 

// carry
initial
begin
	carry = 1'b1;
	carry = #150000 1'b0;
	carry = #150000 1'b1;
	carry = #150000 1'b0;
	carry = #150000 1'b1;
	carry = #180000 1'b0;
	carry = #50000 1'b1;
end 

// c_en
initial
begin
	c_en = 1'b1;
	c_en = #300000 1'b0;
	c_en = #70000 1'b1;
	c_en = #70000 1'b0;
	c_en = #310000 1'b1;
	c_en = #150000 1'b0;
end 

// zero
initial
begin
	zero = 1'b1;
	zero = #150000 1'b0;
	zero = #100000 1'b1;
	zero = #50000 1'b0;
	zero = #80000 1'b1;
	zero = #120000 1'b0;
	zero = #50000 1'b1;
	zero = #100000 1'b0;
	zero = #50000 1'b1;
	zero = #100000 1'b0;
	zero = #100000 1'b1;
	zero = #50000 1'b0;
end 

// z_en
initial
begin
	z_en = 1'b1;
	z_en = #150000 1'b0;
	z_en = #100000 1'b1;
	z_en = #50000 1'b0;
	z_en = #50000 1'b1;
	z_en = #80000 1'b0;
	z_en = #70000 1'b1;
	z_en = #50000 1'b0;
	z_en = #100000 1'b1;
	z_en = #200000 1'b0;
end 
endmodule

