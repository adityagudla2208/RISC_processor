// Copyright (C) 2019  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/09/2022 14:11:23"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          ctrl_unit
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ctrl_unit_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [1:0] cz_in;
reg [3:0] op_code;
// wires                                               
wire [1:0] alu_op;
wire c_en;
wire m1_sel;
wire [1:0] m2_sel;
wire m3_sel;
wire m4_sel;
wire m5_sel;
wire m6_sel;
wire [2:0] m7_sel;
wire [1:0] m8_sel;
wire mem_write_en;
wire reg_wr_en;
wire rtype;
wire [3:0] shft_amt;
wire z_en;

// assign statements (if any)                          
ctrl_unit i1 (
// port map - connection between master ports and signals/registers   
	.alu_op(alu_op),
	.c_en(c_en),
	.cz_in(cz_in),
	.m1_sel(m1_sel),
	.m2_sel(m2_sel),
	.m3_sel(m3_sel),
	.m4_sel(m4_sel),
	.m5_sel(m5_sel),
	.m6_sel(m6_sel),
	.m7_sel(m7_sel),
	.m8_sel(m8_sel),
	.mem_write_en(mem_write_en),
	.op_code(op_code),
	.reg_wr_en(reg_wr_en),
	.rtype(rtype),
	.shft_amt(shft_amt),
	.z_en(z_en)
);
initial 
begin 
#1000000 $finish;
end 
// op_code[ 3 ]
initial
begin
	op_code[3] = 1'b1;
end 
// op_code[ 2 ]
initial
begin
	op_code[2] = 1'b0;
end 
// op_code[ 1 ]
initial
begin
	op_code[1] = 1'b1;
end 
// op_code[ 0 ]
initial
begin
	op_code[0] = 1'b1;
end 
// cz_in[ 1 ]
initial
begin
	cz_in[1] = 1'b0;
	cz_in[1] = #400000 1'b1;
	cz_in[1] = #400000 1'b0;
end 
// cz_in[ 0 ]
initial
begin
	repeat(2)
	begin
		cz_in[0] = 1'b0;
		cz_in[0] = #200000 1'b1;
		# 200000;
	end
	cz_in[0] = 1'b0;
end 
endmodule

