// Copyright (C) 2019  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/08/2022 20:11:21"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          alu
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module alu_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] a;
reg [1:0] alu_control;
reg [15:0] b;
// wires                                               
wire carry;
wire [15:0] result;
wire zero;

// assign statements (if any)                          
alu i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.alu_control(alu_control),
	.b(b),
	.carry(carry),
	.result(result),
	.zero(zero)
);
initial 
begin 
#1000000 $finish;
end 
// a[ 15 ]
initial
begin
	a[15] = 1'b0;
	a[15] = #100000 1'b1;
	a[15] = #300000 1'b0;
	a[15] = #200000 1'b1;
	a[15] = #100000 1'b0;
end 
// a[ 14 ]
initial
begin
	a[14] = 1'b0;
end 
// a[ 13 ]
initial
begin
	a[13] = 1'b0;
	a[13] = #100000 1'b1;
	a[13] = #100000 1'b0;
	a[13] = #100000 1'b1;
	a[13] = #200000 1'b0;
	a[13] = #100000 1'b1;
	a[13] = #100000 1'b0;
	a[13] = #100000 1'b1;
	a[13] = #100000 1'b0;
end 
// a[ 12 ]
initial
begin
	a[12] = 1'b0;
	a[12] = #700000 1'b1;
	a[12] = #200000 1'b0;
end 
// a[ 11 ]
initial
begin
	a[11] = 1'b1;
	a[11] = #200000 1'b0;
	a[11] = #300000 1'b1;
	a[11] = #100000 1'b0;
	a[11] = #100000 1'b1;
	a[11] = #100000 1'b0;
	a[11] = #100000 1'b1;
end 
// a[ 10 ]
initial
begin
	a[10] = 1'b0;
	a[10] = #500000 1'b1;
	a[10] = #100000 1'b0;
	a[10] = #200000 1'b1;
end 
// a[ 9 ]
initial
begin
	a[9] = 1'b1;
	a[9] = #600000 1'b0;
	a[9] = #200000 1'b1;
end 
// a[ 8 ]
initial
begin
	a[8] = 1'b0;
	a[8] = #100000 1'b1;
	a[8] = #200000 1'b0;
	a[8] = #100000 1'b1;
	a[8] = #200000 1'b0;
	a[8] = #100000 1'b1;
	a[8] = #100000 1'b0;
end 
// a[ 7 ]
initial
begin
	a[7] = 1'b0;
	a[7] = #300000 1'b1;
	a[7] = #100000 1'b0;
	a[7] = #300000 1'b1;
end 
// a[ 6 ]
initial
begin
	a[6] = 1'b0;
	a[6] = #100000 1'b1;
	a[6] = #100000 1'b0;
	a[6] = #200000 1'b1;
	a[6] = #200000 1'b0;
	a[6] = #200000 1'b1;
	a[6] = #100000 1'b0;
end 
// a[ 5 ]
initial
begin
	a[5] = 1'b1;
	a[5] = #200000 1'b0;
	a[5] = #100000 1'b1;
	a[5] = #100000 1'b0;
	a[5] = #200000 1'b1;
	a[5] = #100000 1'b0;
	a[5] = #100000 1'b1;
end 
// a[ 4 ]
initial
begin
	a[4] = 1'b1;
	a[4] = #300000 1'b0;
	a[4] = #100000 1'b1;
	a[4] = #100000 1'b0;
	a[4] = #100000 1'b1;
	a[4] = #100000 1'b0;
	a[4] = #200000 1'b1;
end 
// a[ 3 ]
initial
begin
	a[3] = 1'b0;
	a[3] = #400000 1'b1;
	a[3] = #300000 1'b0;
	a[3] = #200000 1'b1;
end 
// a[ 2 ]
initial
begin
	a[2] = 1'b0;
	a[2] = #100000 1'b1;
	a[2] = #400000 1'b0;
	a[2] = #200000 1'b1;
	a[2] = #100000 1'b0;
end 
// a[ 1 ]
initial
begin
	a[1] = 1'b0;
	a[1] = #100000 1'b1;
	a[1] = #100000 1'b0;
	a[1] = #200000 1'b1;
	a[1] = #300000 1'b0;
	a[1] = #200000 1'b1;
end 
// a[ 0 ]
initial
begin
	a[0] = 1'b1;
	a[0] = #200000 1'b0;
	a[0] = #200000 1'b1;
	a[0] = #100000 1'b0;
	a[0] = #100000 1'b1;
	a[0] = #100000 1'b0;
	a[0] = #100000 1'b1;
	a[0] = #100000 1'b0;
end 
// b[ 15 ]
initial
begin
	b[15] = 1'b0;
	b[15] = #100000 1'b1;
	b[15] = #100000 1'b0;
	b[15] = #500000 1'b1;
	b[15] = #200000 1'b0;
end 
// b[ 14 ]
initial
begin
	b[14] = 1'b1;
	b[14] = #400000 1'b0;
	b[14] = #200000 1'b1;
	b[14] = #100000 1'b0;
	b[14] = #100000 1'b1;
end 
// b[ 13 ]
initial
begin
	b[13] = 1'b1;
	b[13] = #100000 1'b0;
	b[13] = #100000 1'b1;
	b[13] = #100000 1'b0;
	b[13] = #100000 1'b1;
	b[13] = #300000 1'b0;
	b[13] = #100000 1'b1;
	b[13] = #100000 1'b0;
end 
// b[ 12 ]
initial
begin
	b[12] = 1'b0;
	b[12] = #200000 1'b1;
	b[12] = #100000 1'b0;
	b[12] = #300000 1'b1;
	b[12] = #100000 1'b0;
	b[12] = #200000 1'b1;
end 
// b[ 11 ]
initial
begin
	b[11] = 1'b1;
	b[11] = #100000 1'b0;
	b[11] = #100000 1'b1;
	b[11] = #100000 1'b0;
	b[11] = #200000 1'b1;
	b[11] = #100000 1'b0;
	b[11] = #200000 1'b1;
	b[11] = #100000 1'b0;
end 
// b[ 10 ]
initial
begin
	b[10] = 1'b1;
	b[10] = #200000 1'b0;
	b[10] = #100000 1'b1;
	b[10] = #100000 1'b0;
	b[10] = #200000 1'b1;
	b[10] = #200000 1'b0;
end 
// b[ 9 ]
initial
begin
	b[9] = 1'b0;
	b[9] = #300000 1'b1;
	b[9] = #200000 1'b0;
end 
// b[ 8 ]
initial
begin
	b[8] = 1'b0;
	b[8] = #200000 1'b1;
	b[8] = #100000 1'b0;
	b[8] = #100000 1'b1;
	b[8] = #100000 1'b0;
	b[8] = #300000 1'b1;
	b[8] = #100000 1'b0;
end 
// b[ 7 ]
initial
begin
	b[7] = 1'b1;
	b[7] = #200000 1'b0;
	b[7] = #100000 1'b1;
	b[7] = #100000 1'b0;
	b[7] = #200000 1'b1;
	b[7] = #100000 1'b0;
	b[7] = #100000 1'b1;
end 
// b[ 6 ]
initial
begin
	b[6] = 1'b1;
	b[6] = #200000 1'b0;
	b[6] = #100000 1'b1;
	b[6] = #400000 1'b0;
end 
// b[ 5 ]
initial
begin
	b[5] = 1'b0;
	b[5] = #100000 1'b1;
	b[5] = #200000 1'b0;
	b[5] = #200000 1'b1;
	b[5] = #200000 1'b0;
	b[5] = #100000 1'b1;
end 
// b[ 4 ]
initial
begin
	b[4] = 1'b1;
	b[4] = #500000 1'b0;
	b[4] = #200000 1'b1;
	b[4] = #100000 1'b0;
end 
// b[ 3 ]
initial
begin
	b[3] = 1'b1;
	b[3] = #300000 1'b0;
	b[3] = #100000 1'b1;
	b[3] = #200000 1'b0;
	b[3] = #100000 1'b1;
	b[3] = #100000 1'b0;
	b[3] = #100000 1'b1;
end 
// b[ 2 ]
initial
begin
	b[2] = 1'b1;
end 
// b[ 1 ]
initial
begin
	b[1] = 1'b0;
	b[1] = #200000 1'b1;
	b[1] = #100000 1'b0;
	b[1] = #100000 1'b1;
	b[1] = #300000 1'b0;
end 
// b[ 0 ]
initial
begin
	b[0] = 1'b1;
	b[0] = #100000 1'b0;
	b[0] = #100000 1'b1;
	b[0] = #100000 1'b0;
	b[0] = #100000 1'b1;
	b[0] = #100000 1'b0;
	b[0] = #100000 1'b1;
	b[0] = #100000 1'b0;
end 
// alu_control[ 1 ]
initial
begin
	alu_control[1] = 1'b0;
	alu_control[1] = #100000 1'b1;
	alu_control[1] = #100000 1'b0;
	alu_control[1] = #200000 1'b1;
	alu_control[1] = #100000 1'b0;
	alu_control[1] = #200000 1'b1;
end 
// alu_control[ 0 ]
initial
begin
	alu_control[0] = 1'b0;
	alu_control[0] = #200000 1'b1;
	alu_control[0] = #100000 1'b0;
	alu_control[0] = #300000 1'b1;
end 
endmodule

