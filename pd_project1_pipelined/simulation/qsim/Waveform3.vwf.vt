// Copyright (C) 2019  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/08/2022 22:55:12"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          alu_op_ctrl
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module alu_op_ctrl_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [1:0] alu_op;
reg c;
reg cflag;
reg rtype;
reg z;
reg zflag;
// wires                                               
wire [1:0] alu_op_out;

// assign statements (if any)                          
alu_op_ctrl i1 (
// port map - connection between master ports and signals/registers   
	.alu_op(alu_op),
	.alu_op_out(alu_op_out),
	.c(c),
	.cflag(cflag),
	.rtype(rtype),
	.z(z),
	.zflag(zflag)
);
initial 
begin 
#1000000 $finish;
end 

// rtype
initial
begin
	rtype = 1'b1;
	rtype = #100000 1'b0;
	rtype = #200000 1'b1;
	rtype = #100000 1'b0;
	rtype = #200000 1'b1;
	rtype = #100000 1'b0;
	rtype = #100000 1'b1;
end 

// c
initial
begin
	c = 1'b1;
	c = #100000 1'b0;
	c = #100000 1'b1;
	c = #100000 1'b0;
	c = #100000 1'b1;
	c = #100000 1'b0;
	c = #100000 1'b1;
	c = #100000 1'b0;
	c = #100000 1'b1;
end 

// cflag
initial
begin
	cflag = 1'b0;
	cflag = #100000 1'b1;
	cflag = #200000 1'b0;
	cflag = #300000 1'b1;
	cflag = #100000 1'b0;
	cflag = #200000 1'b1;
end 

// z
initial
begin
	z = 1'b0;
	z = #200000 1'b1;
	z = #300000 1'b0;
	z = #200000 1'b1;
end 

// zflag
initial
begin
	zflag = 1'b0;
	zflag = #100000 1'b1;
	zflag = #100000 1'b0;
	zflag = #100000 1'b1;
	zflag = #100000 1'b0;
	zflag = #100000 1'b1;
	zflag = #200000 1'b0;
	zflag = #100000 1'b1;
end 
// alu_op[ 1 ]
initial
begin
	alu_op[1] = 1'b0;
	alu_op[1] = #100000 1'b1;
	alu_op[1] = #100000 1'b0;
	alu_op[1] = #500000 1'b1;
end 
// alu_op[ 0 ]
initial
begin
	alu_op[0] = 1'b0;
	alu_op[0] = #400000 1'b1;
	alu_op[0] = #100000 1'b0;
	alu_op[0] = #100000 1'b1;
	alu_op[0] = #200000 1'b0;
	alu_op[0] = #100000 1'b1;
end 
endmodule

