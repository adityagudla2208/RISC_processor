// Copyright (C) 2019  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/08/2022 23:22:24"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          reg_file
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module reg_file_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [2:0] reg_rd_addr1;
reg [2:0] reg_rd_addr2;
reg [2:0] reg_wr_addr;
reg [15:0] reg_wr_data;
reg reg_wr_en;
// wires                                               
wire [15:0] reg_rd_data1;
wire [15:0] reg_rd_data2;

// assign statements (if any)                          
reg_file i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.reg_rd_addr1(reg_rd_addr1),
	.reg_rd_addr2(reg_rd_addr2),
	.reg_rd_data1(reg_rd_data1),
	.reg_rd_data2(reg_rd_data2),
	.reg_wr_addr(reg_wr_addr),
	.reg_wr_data(reg_wr_data),
	.reg_wr_en(reg_wr_en)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #50000 1'b1;
	#50000;
end 
// reg_rd_addr1[ 2 ]
initial
begin
	reg_rd_addr1[2] = 1'b0;
	reg_rd_addr1[2] = #20000 1'b1;
	reg_rd_addr1[2] = #70000 1'b0;
	reg_rd_addr1[2] = #90000 1'b1;
	reg_rd_addr1[2] = #50000 1'b0;
	reg_rd_addr1[2] = #600000 1'b1;
	reg_rd_addr1[2] = #130000 1'b0;
end 
// reg_rd_addr1[ 1 ]
initial
begin
	reg_rd_addr1[1] = 1'b0;
	reg_rd_addr1[1] = #180000 1'b1;
	reg_rd_addr1[1] = #50000 1'b0;
	reg_rd_addr1[1] = #60000 1'b1;
	reg_rd_addr1[1] = #90000 1'b0;
	reg_rd_addr1[1] = #310000 1'b1;
	reg_rd_addr1[1] = #70000 1'b0;
end 
// reg_rd_addr1[ 0 ]
initial
begin
	reg_rd_addr1[0] = 1'b0;
	reg_rd_addr1[0] = #20000 1'b1;
	reg_rd_addr1[0] = #70000 1'b0;
	reg_rd_addr1[0] = #90000 1'b1;
	reg_rd_addr1[0] = #50000 1'b0;
	reg_rd_addr1[0] = #200000 1'b1;
	reg_rd_addr1[0] = #150000 1'b0;
	reg_rd_addr1[0] = #110000 1'b1;
	reg_rd_addr1[0] = #70000 1'b0;
	reg_rd_addr1[0] = #70000 1'b1;
	reg_rd_addr1[0] = #130000 1'b0;
end 
// reg_rd_addr2[ 2 ]
initial
begin
	reg_rd_addr2[2] = 1'b0;
	reg_rd_addr2[2] = #10000 1'b1;
	reg_rd_addr2[2] = #120000 1'b0;
	reg_rd_addr2[2] = #30000 1'b1;
	reg_rd_addr2[2] = #110000 1'b0;
	reg_rd_addr2[2] = #260000 1'b1;
	reg_rd_addr2[2] = #90000 1'b0;
end 
// reg_rd_addr2[ 1 ]
initial
begin
	reg_rd_addr2[1] = 1'b0;
	reg_rd_addr2[1] = #10000 1'b1;
	reg_rd_addr2[1] = #120000 1'b0;
	reg_rd_addr2[1] = #200000 1'b1;
	reg_rd_addr2[1] = #140000 1'b0;
	reg_rd_addr2[1] = #200000 1'b1;
	reg_rd_addr2[1] = #60000 1'b0;
end 
// reg_rd_addr2[ 0 ]
initial
begin
	reg_rd_addr2[0] = 1'b0;
	reg_rd_addr2[0] = #10000 1'b1;
	reg_rd_addr2[0] = #120000 1'b0;
	reg_rd_addr2[0] = #30000 1'b1;
	reg_rd_addr2[0] = #110000 1'b0;
	reg_rd_addr2[0] = #60000 1'b1;
	reg_rd_addr2[0] = #140000 1'b0;
	reg_rd_addr2[0] = #60000 1'b1;
	reg_rd_addr2[0] = #90000 1'b0;
end 

// reg_wr_en
initial
begin
	reg_wr_en = 1'b0;
	reg_wr_en = #400000 1'b1;
	reg_wr_en = #200000 1'b0;
	reg_wr_en = #200000 1'b1;
end 
// reg_wr_addr[ 2 ]
initial
begin
	reg_wr_addr[2] = 1'b0;
	reg_wr_addr[2] = #100000 1'b1;
	reg_wr_addr[2] = #100000 1'b0;
	reg_wr_addr[2] = #100000 1'b1;
	reg_wr_addr[2] = #100000 1'b0;
	reg_wr_addr[2] = #100000 1'b1;
	reg_wr_addr[2] = #100000 1'b0;
	reg_wr_addr[2] = #100000 1'b1;
end 
// reg_wr_addr[ 1 ]
initial
begin
	reg_wr_addr[1] = 1'b1;
	reg_wr_addr[1] = #500000 1'b0;
end 
// reg_wr_addr[ 0 ]
initial
begin
	reg_wr_addr[0] = 1'b1;
	reg_wr_addr[0] = #600000 1'b0;
end 
// reg_wr_data[ 15 ]
initial
begin
	reg_wr_data[15] = 1'b0;
end 
// reg_wr_data[ 14 ]
initial
begin
	reg_wr_data[14] = 1'b0;
end 
// reg_wr_data[ 13 ]
initial
begin
	reg_wr_data[13] = 1'b0;
end 
// reg_wr_data[ 12 ]
initial
begin
	reg_wr_data[12] = 1'b0;
end 
// reg_wr_data[ 11 ]
initial
begin
	reg_wr_data[11] = 1'b0;
end 
// reg_wr_data[ 10 ]
initial
begin
	reg_wr_data[10] = 1'b0;
end 
// reg_wr_data[ 9 ]
initial
begin
	reg_wr_data[9] = 1'b0;
end 
// reg_wr_data[ 8 ]
initial
begin
	reg_wr_data[8] = 1'b0;
end 
// reg_wr_data[ 7 ]
initial
begin
	reg_wr_data[7] = 1'b0;
end 
// reg_wr_data[ 6 ]
initial
begin
	reg_wr_data[6] = 1'b0;
end 
// reg_wr_data[ 5 ]
initial
begin
	reg_wr_data[5] = 1'b0;
end 
// reg_wr_data[ 4 ]
initial
begin
	reg_wr_data[4] = 1'b0;
end 
// reg_wr_data[ 3 ]
initial
begin
	reg_wr_data[3] = 1'b0;
end 
// reg_wr_data[ 2 ]
initial
begin
	reg_wr_data[2] = 1'b0;
end 
// reg_wr_data[ 1 ]
initial
begin
	reg_wr_data[1] = 1'b0;
end 
// reg_wr_data[ 0 ]
initial
begin
	reg_wr_data[0] = 1'b0;
end 
endmodule

