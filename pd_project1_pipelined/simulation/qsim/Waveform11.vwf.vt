// Copyright (C) 2019  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/09/2022 22:22:02"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          pd_project1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module pd_project1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
// wires                                               
wire [15:0] alu_op_a;
wire [15:0] alu_out;
wire [15:0] bs_out;
wire c_flag;
wire [15:0] instr;
wire [15:0] mem_read_data;
wire [15:0] mem_wr_data;
wire [15:0] pc;
wire [15:0] r0;
wire [15:0] r1;
wire [15:0] r2;
wire [15:0] r3;
wire [15:0] r4;
wire [15:0] r5;
wire [15:0] r6;
wire [15:0] ra;
wire [15:0] rb;
wire [2:0] reg_wr_addr;
wire [15:0] reg_wr_data;
wire [1:0] rg_wr_en;
wire z_flag;

// assign statements (if any)                          
pd_project1 i1 (
// port map - connection between master ports and signals/registers   
	.alu_op_a(alu_op_a),
	.alu_out(alu_out),
	.bs_out(bs_out),
	.c_flag(c_flag),
	.clk(clk),
	.instr(instr),
	.mem_read_data(mem_read_data),
	.mem_wr_data(mem_wr_data),
	.pc(pc),
	.r0(r0),
	.r1(r1),
	.r2(r2),
	.r3(r3),
	.r4(r4),
	.r5(r5),
	.r6(r6),
	.ra(ra),
	.rb(rb),
	.reg_wr_addr(reg_wr_addr),
	.reg_wr_data(reg_wr_data),
	.rg_wr_en(rg_wr_en),
	.z_flag(z_flag)
);
initial 
begin 
#1000000 $finish;
end 

// clk
initial
begin
	repeat(8)
	begin
		clk = 1'b0;
		clk = #60000 1'b1;
		# 60000;
	end
	clk = 1'b0;
end 
endmodule

