// Copyright (C) 2019  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/09/2022 23:24:46"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          mem_wb
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module mem_wb_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] alu_out;
reg [15:0] bs_out;
reg clk;
reg [15:0] data_mem_out;
reg [1:0] m8_sel;
reg [15:0] pc_out;
// wires                                               
wire [15:0] alu_out_wb;
wire [15:0] bs_out_wb;
wire [15:0] data_mem_out_wb;
wire [1:0] m8_sel_wb;
wire [15:0] pc_out_wb;

// assign statements (if any)                          
mem_wb i1 (
// port map - connection between master ports and signals/registers   
	.alu_out(alu_out),
	.alu_out_wb(alu_out_wb),
	.bs_out(bs_out),
	.bs_out_wb(bs_out_wb),
	.clk(clk),
	.data_mem_out(data_mem_out),
	.data_mem_out_wb(data_mem_out_wb),
	.m8_sel(m8_sel),
	.m8_sel_wb(m8_sel_wb),
	.pc_out(pc_out),
	.pc_out_wb(pc_out_wb)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #50000 1'b1;
	#50000;
end 
// alu_out[ 15 ]
initial
begin
	alu_out[15] = 1'b1;
	alu_out[15] = #100000 1'b0;
	alu_out[15] = #200000 1'b1;
	alu_out[15] = #100000 1'b0;
	alu_out[15] = #100000 1'b1;
end 
// alu_out[ 14 ]
initial
begin
	alu_out[14] = 1'b1;
	alu_out[14] = #200000 1'b0;
	alu_out[14] = #100000 1'b1;
	alu_out[14] = #100000 1'b0;
	alu_out[14] = #300000 1'b1;
	alu_out[14] = #100000 1'b0;
end 
// alu_out[ 13 ]
initial
begin
	alu_out[13] = 1'b0;
	alu_out[13] = #100000 1'b1;
	alu_out[13] = #200000 1'b0;
	alu_out[13] = #100000 1'b1;
	alu_out[13] = #400000 1'b0;
	alu_out[13] = #100000 1'b1;
end 
// alu_out[ 12 ]
initial
begin
	alu_out[12] = 1'b0;
	alu_out[12] = #200000 1'b1;
	alu_out[12] = #100000 1'b0;
	alu_out[12] = #400000 1'b1;
	alu_out[12] = #100000 1'b0;
	alu_out[12] = #100000 1'b1;
end 
// alu_out[ 11 ]
initial
begin
	alu_out[11] = 1'b1;
	alu_out[11] = #400000 1'b0;
	alu_out[11] = #200000 1'b1;
	alu_out[11] = #200000 1'b0;
	alu_out[11] = #100000 1'b1;
end 
// alu_out[ 10 ]
initial
begin
	alu_out[10] = 1'b0;
	alu_out[10] = #300000 1'b1;
	alu_out[10] = #100000 1'b0;
	alu_out[10] = #100000 1'b1;
	alu_out[10] = #100000 1'b0;
	alu_out[10] = #200000 1'b1;
	alu_out[10] = #100000 1'b0;
end 
// alu_out[ 9 ]
initial
begin
	alu_out[9] = 1'b1;
	alu_out[9] = #400000 1'b0;
	alu_out[9] = #300000 1'b1;
	alu_out[9] = #100000 1'b0;
end 
// alu_out[ 8 ]
initial
begin
	alu_out[8] = 1'b0;
	alu_out[8] = #100000 1'b1;
	alu_out[8] = #100000 1'b0;
	alu_out[8] = #200000 1'b1;
	alu_out[8] = #100000 1'b0;
	alu_out[8] = #100000 1'b1;
	alu_out[8] = #100000 1'b0;
	alu_out[8] = #200000 1'b1;
end 
// alu_out[ 7 ]
initial
begin
	alu_out[7] = 1'b1;
	alu_out[7] = #100000 1'b0;
	alu_out[7] = #100000 1'b1;
	alu_out[7] = #300000 1'b0;
	alu_out[7] = #400000 1'b1;
end 
// alu_out[ 6 ]
initial
begin
	alu_out[6] = 1'b1;
	alu_out[6] = #100000 1'b0;
	alu_out[6] = #300000 1'b1;
	alu_out[6] = #100000 1'b0;
	alu_out[6] = #200000 1'b1;
	alu_out[6] = #100000 1'b0;
	alu_out[6] = #100000 1'b1;
end 
// alu_out[ 5 ]
initial
begin
	alu_out[5] = 1'b0;
	alu_out[5] = #100000 1'b1;
	alu_out[5] = #200000 1'b0;
	alu_out[5] = #100000 1'b1;
	alu_out[5] = #300000 1'b0;
	alu_out[5] = #100000 1'b1;
	alu_out[5] = #100000 1'b0;
end 
// alu_out[ 4 ]
initial
begin
	alu_out[4] = 1'b1;
	alu_out[4] = #100000 1'b0;
	alu_out[4] = #100000 1'b1;
	alu_out[4] = #200000 1'b0;
	alu_out[4] = #100000 1'b1;
	alu_out[4] = #100000 1'b0;
	alu_out[4] = #100000 1'b1;
	alu_out[4] = #100000 1'b0;
	alu_out[4] = #100000 1'b1;
end 
// alu_out[ 3 ]
initial
begin
	alu_out[3] = 1'b0;
	alu_out[3] = #100000 1'b1;
	alu_out[3] = #100000 1'b0;
	alu_out[3] = #100000 1'b1;
	alu_out[3] = #100000 1'b0;
	alu_out[3] = #100000 1'b1;
	alu_out[3] = #100000 1'b0;
	alu_out[3] = #100000 1'b1;
end 
// alu_out[ 2 ]
initial
begin
	alu_out[2] = 1'b1;
	alu_out[2] = #300000 1'b0;
	alu_out[2] = #100000 1'b1;
	alu_out[2] = #100000 1'b0;
	alu_out[2] = #300000 1'b1;
	alu_out[2] = #100000 1'b0;
end 
// alu_out[ 1 ]
initial
begin
	alu_out[1] = 1'b1;
	alu_out[1] = #100000 1'b0;
	alu_out[1] = #100000 1'b1;
	alu_out[1] = #200000 1'b0;
	alu_out[1] = #200000 1'b1;
	alu_out[1] = #100000 1'b0;
	alu_out[1] = #100000 1'b1;
end 
// alu_out[ 0 ]
initial
begin
	alu_out[0] = 1'b0;
	alu_out[0] = #200000 1'b1;
	alu_out[0] = #100000 1'b0;
	alu_out[0] = #200000 1'b1;
	alu_out[0] = #100000 1'b0;
	alu_out[0] = #100000 1'b1;
end 
// bs_out[ 15 ]
initial
begin
	bs_out[15] = 1'b1;
	bs_out[15] = #300000 1'b0;
	bs_out[15] = #200000 1'b1;
end 
// bs_out[ 14 ]
initial
begin
	bs_out[14] = 1'b1;
	bs_out[14] = #100000 1'b0;
	bs_out[14] = #100000 1'b1;
	bs_out[14] = #200000 1'b0;
	bs_out[14] = #300000 1'b1;
	bs_out[14] = #100000 1'b0;
	bs_out[14] = #100000 1'b1;
end 
// bs_out[ 13 ]
initial
begin
	bs_out[13] = 1'b0;
	bs_out[13] = #200000 1'b1;
	bs_out[13] = #400000 1'b0;
	bs_out[13] = #100000 1'b1;
	bs_out[13] = #200000 1'b0;
end 
// bs_out[ 12 ]
initial
begin
	bs_out[12] = 1'b1;
	bs_out[12] = #100000 1'b0;
	bs_out[12] = #100000 1'b1;
	bs_out[12] = #100000 1'b0;
	bs_out[12] = #100000 1'b1;
	bs_out[12] = #100000 1'b0;
	bs_out[12] = #100000 1'b1;
	bs_out[12] = #100000 1'b0;
end 
// bs_out[ 11 ]
initial
begin
	bs_out[11] = 1'b0;
	bs_out[11] = #100000 1'b1;
	bs_out[11] = #100000 1'b0;
	bs_out[11] = #200000 1'b1;
	bs_out[11] = #300000 1'b0;
	bs_out[11] = #200000 1'b1;
end 
// bs_out[ 10 ]
initial
begin
	bs_out[10] = 1'b0;
	bs_out[10] = #100000 1'b1;
	bs_out[10] = #200000 1'b0;
	bs_out[10] = #200000 1'b1;
	bs_out[10] = #200000 1'b0;
	bs_out[10] = #100000 1'b1;
end 
// bs_out[ 9 ]
initial
begin
	bs_out[9] = 1'b0;
	bs_out[9] = #200000 1'b1;
	bs_out[9] = #100000 1'b0;
	bs_out[9] = #300000 1'b1;
	bs_out[9] = #100000 1'b0;
	bs_out[9] = #100000 1'b1;
end 
// bs_out[ 8 ]
initial
begin
	bs_out[8] = 1'b0;
	bs_out[8] = #100000 1'b1;
	bs_out[8] = #100000 1'b0;
	bs_out[8] = #200000 1'b1;
	bs_out[8] = #200000 1'b0;
	bs_out[8] = #200000 1'b1;
	bs_out[8] = #100000 1'b0;
end 
// bs_out[ 7 ]
initial
begin
	bs_out[7] = 1'b1;
	bs_out[7] = #100000 1'b0;
	bs_out[7] = #200000 1'b1;
	bs_out[7] = #100000 1'b0;
	bs_out[7] = #100000 1'b1;
	bs_out[7] = #100000 1'b0;
	bs_out[7] = #100000 1'b1;
	bs_out[7] = #100000 1'b0;
end 
// bs_out[ 6 ]
initial
begin
	bs_out[6] = 1'b0;
	bs_out[6] = #300000 1'b1;
	bs_out[6] = #100000 1'b0;
	bs_out[6] = #300000 1'b1;
end 
// bs_out[ 5 ]
initial
begin
	bs_out[5] = 1'b1;
	bs_out[5] = #500000 1'b0;
	bs_out[5] = #100000 1'b1;
	bs_out[5] = #200000 1'b0;
	bs_out[5] = #100000 1'b1;
end 
// bs_out[ 4 ]
initial
begin
	bs_out[4] = 1'b1;
	bs_out[4] = #300000 1'b0;
	bs_out[4] = #600000 1'b1;
end 
// bs_out[ 3 ]
initial
begin
	bs_out[3] = 1'b1;
	bs_out[3] = #100000 1'b0;
	bs_out[3] = #300000 1'b1;
	bs_out[3] = #200000 1'b0;
	bs_out[3] = #200000 1'b1;
	bs_out[3] = #100000 1'b0;
end 
// bs_out[ 2 ]
initial
begin
	bs_out[2] = 1'b1;
	bs_out[2] = #100000 1'b0;
	bs_out[2] = #100000 1'b1;
	bs_out[2] = #100000 1'b0;
	bs_out[2] = #500000 1'b1;
end 
// bs_out[ 1 ]
initial
begin
	bs_out[1] = 1'b0;
	bs_out[1] = #100000 1'b1;
	bs_out[1] = #300000 1'b0;
	bs_out[1] = #100000 1'b1;
	bs_out[1] = #300000 1'b0;
end 
// bs_out[ 0 ]
initial
begin
	bs_out[0] = 1'b0;
	bs_out[0] = #100000 1'b1;
	bs_out[0] = #100000 1'b0;
	bs_out[0] = #300000 1'b1;
	bs_out[0] = #200000 1'b0;
	bs_out[0] = #100000 1'b1;
	bs_out[0] = #100000 1'b0;
end 
// data_mem_out[ 15 ]
initial
begin
	data_mem_out[15] = 1'b0;
	data_mem_out[15] = #200000 1'b1;
	data_mem_out[15] = #500000 1'b0;
	data_mem_out[15] = #100000 1'b1;
end 
// data_mem_out[ 14 ]
initial
begin
	data_mem_out[14] = 1'b1;
	data_mem_out[14] = #200000 1'b0;
	data_mem_out[14] = #100000 1'b1;
	data_mem_out[14] = #100000 1'b0;
	data_mem_out[14] = #100000 1'b1;
	data_mem_out[14] = #400000 1'b0;
end 
// data_mem_out[ 13 ]
initial
begin
	data_mem_out[13] = 1'b0;
	data_mem_out[13] = #200000 1'b1;
	data_mem_out[13] = #100000 1'b0;
	data_mem_out[13] = #200000 1'b1;
	data_mem_out[13] = #100000 1'b0;
	data_mem_out[13] = #100000 1'b1;
	data_mem_out[13] = #100000 1'b0;
end 
// data_mem_out[ 12 ]
initial
begin
	data_mem_out[12] = 1'b1;
	data_mem_out[12] = #200000 1'b0;
	data_mem_out[12] = #200000 1'b1;
	data_mem_out[12] = #200000 1'b0;
	data_mem_out[12] = #300000 1'b1;
end 
// data_mem_out[ 11 ]
initial
begin
	data_mem_out[11] = 1'b1;
	data_mem_out[11] = #100000 1'b0;
	data_mem_out[11] = #500000 1'b1;
	data_mem_out[11] = #300000 1'b0;
end 
// data_mem_out[ 10 ]
initial
begin
	data_mem_out[10] = 1'b1;
	data_mem_out[10] = #300000 1'b0;
	data_mem_out[10] = #100000 1'b1;
	data_mem_out[10] = #100000 1'b0;
	data_mem_out[10] = #100000 1'b1;
	data_mem_out[10] = #200000 1'b0;
end 
// data_mem_out[ 9 ]
initial
begin
	data_mem_out[9] = 1'b0;
	data_mem_out[9] = #300000 1'b1;
	data_mem_out[9] = #100000 1'b0;
	data_mem_out[9] = #300000 1'b1;
	data_mem_out[9] = #200000 1'b0;
end 
// data_mem_out[ 8 ]
initial
begin
	data_mem_out[8] = 1'b1;
	data_mem_out[8] = #100000 1'b0;
	data_mem_out[8] = #100000 1'b1;
	data_mem_out[8] = #100000 1'b0;
	data_mem_out[8] = #100000 1'b1;
	data_mem_out[8] = #200000 1'b0;
	data_mem_out[8] = #100000 1'b1;
	data_mem_out[8] = #100000 1'b0;
end 
// data_mem_out[ 7 ]
initial
begin
	data_mem_out[7] = 1'b0;
	data_mem_out[7] = #200000 1'b1;
	data_mem_out[7] = #100000 1'b0;
	data_mem_out[7] = #100000 1'b1;
	data_mem_out[7] = #400000 1'b0;
end 
// data_mem_out[ 6 ]
initial
begin
	data_mem_out[6] = 1'b1;
	data_mem_out[6] = #200000 1'b0;
	data_mem_out[6] = #400000 1'b1;
	data_mem_out[6] = #100000 1'b0;
end 
// data_mem_out[ 5 ]
initial
begin
	data_mem_out[5] = 1'b1;
	data_mem_out[5] = #100000 1'b0;
	data_mem_out[5] = #500000 1'b1;
	data_mem_out[5] = #300000 1'b0;
end 
// data_mem_out[ 4 ]
initial
begin
	data_mem_out[4] = 1'b1;
	data_mem_out[4] = #100000 1'b0;
	data_mem_out[4] = #100000 1'b1;
	data_mem_out[4] = #500000 1'b0;
	data_mem_out[4] = #100000 1'b1;
end 
// data_mem_out[ 3 ]
initial
begin
	data_mem_out[3] = 1'b1;
	data_mem_out[3] = #100000 1'b0;
	data_mem_out[3] = #100000 1'b1;
	data_mem_out[3] = #100000 1'b0;
	data_mem_out[3] = #100000 1'b1;
	data_mem_out[3] = #200000 1'b0;
	data_mem_out[3] = #300000 1'b1;
end 
// data_mem_out[ 2 ]
initial
begin
	data_mem_out[2] = 1'b1;
	data_mem_out[2] = #100000 1'b0;
	data_mem_out[2] = #300000 1'b1;
	data_mem_out[2] = #500000 1'b0;
end 
// data_mem_out[ 1 ]
initial
begin
	data_mem_out[1] = 1'b1;
	data_mem_out[1] = #200000 1'b0;
	data_mem_out[1] = #500000 1'b1;
end 
// data_mem_out[ 0 ]
initial
begin
	data_mem_out[0] = 1'b1;
	data_mem_out[0] = #100000 1'b0;
	data_mem_out[0] = #300000 1'b1;
	data_mem_out[0] = #100000 1'b0;
	data_mem_out[0] = #200000 1'b1;
	data_mem_out[0] = #200000 1'b0;
end 
// pc_out[ 15 ]
initial
begin
	pc_out[15] = 1'b1;
	pc_out[15] = #100000 1'b0;
	pc_out[15] = #200000 1'b1;
	pc_out[15] = #500000 1'b0;
end 
// pc_out[ 14 ]
initial
begin
	pc_out[14] = 1'b1;
	pc_out[14] = #100000 1'b0;
	pc_out[14] = #100000 1'b1;
	pc_out[14] = #300000 1'b0;
	pc_out[14] = #100000 1'b1;
	pc_out[14] = #300000 1'b0;
end 
// pc_out[ 13 ]
initial
begin
	pc_out[13] = 1'b0;
	pc_out[13] = #100000 1'b1;
	pc_out[13] = #100000 1'b0;
	pc_out[13] = #100000 1'b1;
	pc_out[13] = #200000 1'b0;
	pc_out[13] = #100000 1'b1;
	pc_out[13] = #100000 1'b0;
	pc_out[13] = #200000 1'b1;
end 
// pc_out[ 12 ]
initial
begin
	pc_out[12] = 1'b1;
	pc_out[12] = #200000 1'b0;
	pc_out[12] = #200000 1'b1;
	pc_out[12] = #300000 1'b0;
	pc_out[12] = #200000 1'b1;
end 
// pc_out[ 11 ]
initial
begin
	pc_out[11] = 1'b1;
	pc_out[11] = #200000 1'b0;
	pc_out[11] = #100000 1'b1;
	pc_out[11] = #100000 1'b0;
	pc_out[11] = #300000 1'b1;
	pc_out[11] = #200000 1'b0;
end 
// pc_out[ 10 ]
initial
begin
	pc_out[10] = 1'b0;
	pc_out[10] = #100000 1'b1;
	pc_out[10] = #600000 1'b0;
	pc_out[10] = #100000 1'b1;
	pc_out[10] = #100000 1'b0;
end 
// pc_out[ 9 ]
initial
begin
	pc_out[9] = 1'b1;
	pc_out[9] = #400000 1'b0;
	pc_out[9] = #500000 1'b1;
end 
// pc_out[ 8 ]
initial
begin
	pc_out[8] = 1'b1;
	pc_out[8] = #200000 1'b0;
	pc_out[8] = #100000 1'b1;
	pc_out[8] = #100000 1'b0;
	pc_out[8] = #200000 1'b1;
	pc_out[8] = #100000 1'b0;
end 
// pc_out[ 7 ]
initial
begin
	pc_out[7] = 1'b1;
	pc_out[7] = #100000 1'b0;
	pc_out[7] = #300000 1'b1;
	pc_out[7] = #100000 1'b0;
	pc_out[7] = #100000 1'b1;
	pc_out[7] = #100000 1'b0;
	pc_out[7] = #100000 1'b1;
	pc_out[7] = #100000 1'b0;
end 
// pc_out[ 6 ]
initial
begin
	pc_out[6] = 1'b1;
	pc_out[6] = #100000 1'b0;
	pc_out[6] = #100000 1'b1;
	pc_out[6] = #200000 1'b0;
	pc_out[6] = #400000 1'b1;
	pc_out[6] = #100000 1'b0;
end 
// pc_out[ 5 ]
initial
begin
	pc_out[5] = 1'b1;
	pc_out[5] = #500000 1'b0;
	pc_out[5] = #100000 1'b1;
	pc_out[5] = #100000 1'b0;
	pc_out[5] = #200000 1'b1;
end 
// pc_out[ 4 ]
initial
begin
	pc_out[4] = 1'b0;
	pc_out[4] = #200000 1'b1;
	pc_out[4] = #300000 1'b0;
	pc_out[4] = #200000 1'b1;
	pc_out[4] = #100000 1'b0;
end 
// pc_out[ 3 ]
initial
begin
	pc_out[3] = 1'b1;
	pc_out[3] = #100000 1'b0;
	pc_out[3] = #200000 1'b1;
	pc_out[3] = #100000 1'b0;
	pc_out[3] = #200000 1'b1;
end 
// pc_out[ 2 ]
initial
begin
	pc_out[2] = 1'b1;
	pc_out[2] = #300000 1'b0;
	pc_out[2] = #400000 1'b1;
	pc_out[2] = #100000 1'b0;
end 
// pc_out[ 1 ]
initial
begin
	pc_out[1] = 1'b1;
	pc_out[1] = #200000 1'b0;
	pc_out[1] = #100000 1'b1;
	pc_out[1] = #100000 1'b0;
	pc_out[1] = #400000 1'b1;
	pc_out[1] = #100000 1'b0;
end 
// pc_out[ 0 ]
initial
begin
	pc_out[0] = 1'b0;
	pc_out[0] = #200000 1'b1;
	pc_out[0] = #200000 1'b0;
	pc_out[0] = #100000 1'b1;
	pc_out[0] = #200000 1'b0;
	pc_out[0] = #200000 1'b1;
end 
// m8_sel[ 1 ]
initial
begin
	m8_sel[1] = 1'b1;
	m8_sel[1] = #100000 1'b0;
	m8_sel[1] = #200000 1'b1;
	m8_sel[1] = #100000 1'b0;
	m8_sel[1] = #100000 1'b1;
end 
// m8_sel[ 0 ]
initial
begin
	m8_sel[0] = 1'b1;
	m8_sel[0] = #200000 1'b0;
	m8_sel[0] = #100000 1'b1;
	m8_sel[0] = #100000 1'b0;
	m8_sel[0] = #300000 1'b1;
	m8_sel[0] = #100000 1'b0;
end 
endmodule

