// Copyright (C) 2019  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/09/2022 11:41:12"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          data_memory
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module data_memory_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] addr;
reg clk;
reg [15:0] mem_write_data;
reg mem_write_en;
// wires                                               
wire [15:0] mem_read_data;

// assign statements (if any)                          
data_memory i1 (
// port map - connection between master ports and signals/registers   
	.addr(addr),
	.clk(clk),
	.mem_read_data(mem_read_data),
	.mem_write_data(mem_write_data),
	.mem_write_en(mem_write_en)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #100000 1'b1;
	#100000;
end 
// addr[ 15 ]
initial
begin
	addr[15] = 1'b0;
end 
// addr[ 14 ]
initial
begin
	addr[14] = 1'b0;
end 
// addr[ 13 ]
initial
begin
	addr[13] = 1'b0;
end 
// addr[ 12 ]
initial
begin
	addr[12] = 1'b0;
end 
// addr[ 11 ]
initial
begin
	addr[11] = 1'b0;
end 
// addr[ 10 ]
initial
begin
	addr[10] = 1'b0;
end 
// addr[ 9 ]
initial
begin
	addr[9] = 1'b0;
end 
// addr[ 8 ]
initial
begin
	addr[8] = 1'b0;
end 
// addr[ 7 ]
initial
begin
	addr[7] = 1'b0;
	addr[7] = #300000 1'b1;
	addr[7] = #450000 1'b0;
	addr[7] = #150000 1'b1;
end 
// addr[ 6 ]
initial
begin
	addr[6] = 1'b1;
	addr[6] = #300000 1'b0;
	addr[6] = #300000 1'b1;
	addr[6] = #150000 1'b0;
end 
// addr[ 5 ]
initial
begin
	addr[5] = 1'b0;
	addr[5] = #300000 1'b1;
	addr[5] = #450000 1'b0;
	addr[5] = #150000 1'b1;
end 
// addr[ 4 ]
initial
begin
	addr[4] = 1'b1;
	addr[4] = #750000 1'b0;
	addr[4] = #150000 1'b1;
end 
// addr[ 3 ]
initial
begin
	addr[3] = 1'b0;
	addr[3] = #300000 1'b1;
	addr[3] = #450000 1'b0;
	addr[3] = #150000 1'b1;
end 
// addr[ 2 ]
initial
begin
	addr[2] = 1'b1;
	addr[2] = #600000 1'b0;
	addr[2] = #300000 1'b1;
end 
// addr[ 1 ]
initial
begin
	addr[1] = 1'b1;
	addr[1] = #450000 1'b0;
end 
// addr[ 0 ]
initial
begin
	addr[0] = 1'b1;
	addr[0] = #300000 1'b0;
	addr[0] = #150000 1'b1;
	addr[0] = #150000 1'b0;
	addr[0] = #150000 1'b1;
end 

// mem_write_en
initial
begin
	mem_write_en = 1'b0;
	mem_write_en = #20000 1'b1;
	mem_write_en = #100000 1'b0;
end 
// mem_write_data[ 15 ]
initial
begin
	mem_write_data[15] = 1'b0;
end 
// mem_write_data[ 14 ]
initial
begin
	mem_write_data[14] = 1'b0;
end 
// mem_write_data[ 13 ]
initial
begin
	mem_write_data[13] = 1'b0;
end 
// mem_write_data[ 12 ]
initial
begin
	mem_write_data[12] = 1'b1;
	mem_write_data[12] = #140000 1'b0;
end 
// mem_write_data[ 11 ]
initial
begin
	mem_write_data[11] = 1'b0;
end 
// mem_write_data[ 10 ]
initial
begin
	mem_write_data[10] = 1'b0;
end 
// mem_write_data[ 9 ]
initial
begin
	mem_write_data[9] = 1'b1;
	mem_write_data[9] = #140000 1'b0;
end 
// mem_write_data[ 8 ]
initial
begin
	mem_write_data[8] = 1'b0;
end 
// mem_write_data[ 7 ]
initial
begin
	mem_write_data[7] = 1'b0;
end 
// mem_write_data[ 6 ]
initial
begin
	mem_write_data[6] = 1'b0;
end 
// mem_write_data[ 5 ]
initial
begin
	mem_write_data[5] = 1'b1;
	mem_write_data[5] = #140000 1'b0;
end 
// mem_write_data[ 4 ]
initial
begin
	mem_write_data[4] = 1'b1;
	mem_write_data[4] = #140000 1'b0;
end 
// mem_write_data[ 3 ]
initial
begin
	mem_write_data[3] = 1'b0;
end 
// mem_write_data[ 2 ]
initial
begin
	mem_write_data[2] = 1'b1;
	mem_write_data[2] = #140000 1'b0;
end 
// mem_write_data[ 1 ]
initial
begin
	mem_write_data[1] = 1'b0;
end 
// mem_write_data[ 0 ]
initial
begin
	mem_write_data[0] = 1'b0;
end 
endmodule

