// Copyright (C) 2019  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/09/2022 00:24:31"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          pc
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module pc_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [15:0] pc_next;
// wires                                               
wire [15:0] pc;

// assign statements (if any)                          
pc i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.pc(pc),
	.pc_next(pc_next)
);
initial 
begin 
#1000000 $stop;
end 

// clk
initial
begin
	clk = 1'b1;
	# 200000;
	repeat(2)
	begin
		clk = 1'b0;
		clk = #200000 1'b1;
		# 200000;
	end
end 
// pc_next[ 15 ]
initial
begin
	pc_next[15] = 1'b1;
	pc_next[15] = #450000 1'b0;
	pc_next[15] = #300000 1'b1;
end 
// pc_next[ 14 ]
initial
begin
	pc_next[14] = 1'b1;
	pc_next[14] = #150000 1'b0;
	pc_next[14] = #300000 1'b1;
	pc_next[14] = #150000 1'b0;
end 
// pc_next[ 13 ]
initial
begin
	pc_next[13] = 1'b1;
	pc_next[13] = #450000 1'b0;
end 
// pc_next[ 12 ]
initial
begin
	pc_next[12] = 1'b0;
	pc_next[12] = #150000 1'b1;
	pc_next[12] = #150000 1'b0;
	pc_next[12] = #150000 1'b1;
	pc_next[12] = #150000 1'b0;
	pc_next[12] = #300000 1'b1;
end 
// pc_next[ 11 ]
initial
begin
	pc_next[11] = 1'b0;
	pc_next[11] = #750000 1'b1;
	pc_next[11] = #150000 1'b0;
end 
// pc_next[ 10 ]
initial
begin
	pc_next[10] = 1'b0;
	pc_next[10] = #600000 1'b1;
end 
// pc_next[ 9 ]
initial
begin
	pc_next[9] = 1'b1;
	pc_next[9] = #450000 1'b0;
	pc_next[9] = #300000 1'b1;
end 
// pc_next[ 8 ]
initial
begin
	pc_next[8] = 1'b0;
	pc_next[8] = #150000 1'b1;
	pc_next[8] = #150000 1'b0;
	pc_next[8] = #150000 1'b1;
	pc_next[8] = #450000 1'b0;
end 
// pc_next[ 7 ]
initial
begin
	pc_next[7] = 1'b1;
	pc_next[7] = #150000 1'b0;
	pc_next[7] = #300000 1'b1;
end 
// pc_next[ 6 ]
initial
begin
	pc_next[6] = 1'b0;
	pc_next[6] = #750000 1'b1;
end 
// pc_next[ 5 ]
initial
begin
	pc_next[5] = 1'b1;
	pc_next[5] = #600000 1'b0;
	pc_next[5] = #300000 1'b1;
end 
// pc_next[ 4 ]
initial
begin
	pc_next[4] = 1'b1;
	pc_next[4] = #300000 1'b0;
	pc_next[4] = #150000 1'b1;
	pc_next[4] = #300000 1'b0;
	pc_next[4] = #150000 1'b1;
end 
// pc_next[ 3 ]
initial
begin
	pc_next[3] = 1'b1;
	pc_next[3] = #150000 1'b0;
	pc_next[3] = #300000 1'b1;
	pc_next[3] = #150000 1'b0;
end 
// pc_next[ 2 ]
initial
begin
	pc_next[2] = 1'b0;
	pc_next[2] = #150000 1'b1;
	pc_next[2] = #300000 1'b0;
	pc_next[2] = #150000 1'b1;
	pc_next[2] = #150000 1'b0;
end 
// pc_next[ 1 ]
initial
begin
	pc_next[1] = 1'b1;
	pc_next[1] = #300000 1'b0;
	pc_next[1] = #150000 1'b1;
end 
// pc_next[ 0 ]
initial
begin
	pc_next[0] = 1'b1;
	pc_next[0] = #750000 1'b0;
	pc_next[0] = #150000 1'b1;
end 
endmodule

